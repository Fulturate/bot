use crate::{
    bot::modules::Owner,
    core::db::schemas::{group::Group, settings::Settings, user::User},
    errors::MyError,
};
use log::{info};
use mongodb::bson::doc;
use oximod::ModelTrait;
use teloxide::{
    payloads::SendMessageSetters,
    prelude::Requester,
    types::{ChatMemberUpdated, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode},
    Bot,
};

pub async fn handle_bot_added(bot: Bot, update: ChatMemberUpdated) -> Result<(), MyError> {
    let id = update.chat.id.to_string();

    if update.new_chat_member.is_banned() || update.new_chat_member.is_left() {
        info!("Bot was kicked/banned. Deleting all data for ID: {}", &id);

        let owner_type = if update.chat.is_private() { "user" } else { "group" };

        if owner_type == "user" {
            User::delete(doc! { "user_id": &id }).await.ok();
        } else {
            Group::delete(doc! { "group_id": &id }).await.ok();
        }

        Settings::delete(doc! { "owner_id": &id, "owner_type": owner_type })
            .await
            .ok();

        return Ok(());
    }

    info!("Bot added to chat. ID: {}", &id);

    let welcome_text = if update.chat.is_private() {
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fulturate!</b> üëã\n\n\
            –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏!\n\n\
            –í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n\
            - üì• <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞</b>: –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\
            - üí± <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç</b>: –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π.\n\
            - ü§´ <b>–°–∏—Å—Ç–µ–º–∞ ¬´—à–µ–ø–æ—Ç–∞¬ª</b>: –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.\n\n\
            –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥—É–ª–∏ –ø–æ–¥ —Å–µ–±—è –∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings."
            .to_string()
    } else {
        "<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ Fulturate –≤ –≤–∞—à —á–∞—Ç!</b> üéâ\n\n\
            –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ–≥–∞—Ç—å –≤–∞—à–µ–º—É —á–∞—Ç—É!\n\n\
            –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã <b>–ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>. \
            –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n\n\
            –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–∏ –º–æ–¥—É–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /settings."
            .to_string()
    };

    let news_link_button =
        InlineKeyboardButton::url("–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏", "https://t.me/fulturate".parse().unwrap());
    let terms_of_use_link_button = InlineKeyboardButton::url(
        "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "https://telegra.ph/Terms-Of-Use--Usloviya-ispolzovaniya-09-21"
            .parse()?,
    );

    bot.send_message(update.chat.id, welcome_text)
        .parse_mode(ParseMode::Html)
        .reply_markup(InlineKeyboardMarkup::new(vec![vec![
            news_link_button,
            terms_of_use_link_button,
        ]]))
        .await?;

    if update.chat.is_private() {
        if User::find_one(doc! { "user_id": &id }).await?.is_none() {
            User::new().user_id(id.clone()).save().await?;
        }
        let owner = Owner {
            id,
            r#type: "user".to_string(),
        };
        Settings::get_or_create(&owner).await?;
    } else {
        if Group::find_one(doc! { "group_id": &id }).await?.is_none() {
            Group::new().group_id(id.clone()).save().await?;
        }
        let owner = Owner {
            id,
            r#type: "group".to_string(),
        };
        Settings::get_or_create(&owner).await?;
    }

    Ok(())
}