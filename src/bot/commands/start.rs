use crate::{
    bot::modules::Owner,
    core::{
        config::Config,
        db::schemas::{settings::Settings, user::User},
    },
    errors::MyError,
};
use mongodb::bson::doc;
use oximod::Model;
use std::time::Instant;
use sysinfo::System;
use teloxide::{
    prelude::*,
    types::{ParseMode, ReplyParameters},
};
use teloxide::types::{InlineKeyboardButton, InlineKeyboardMarkup};

pub async fn start_handler(
    bot: Bot,
    message: Message,
    config: &Config,
    _arg: String,
) -> Result<(), MyError> {
    let mut is_new_user = false;

    if message.chat.is_private() {
        if let Some(user) = message.from {
            if User::find_one(doc! { "user_id": &user.id.to_string() }).await?.is_none() {
                is_new_user = true;
                User::new().user_id(user.id.to_string().clone()).save().await?;

                let owner = Owner {
                    id: user.id.to_string(),
                    r#type: "user".to_string(),
                };
                Settings::create_with_defaults(&owner).await?;
            }
        }
    }

    let version = config.get_version();

    let start_time = Instant::now();
    bot.get_me().await?;
    let api_ping = start_time.elapsed().as_millis();

    let mut system_info = System::new_all();
    system_info.refresh_all();

    let total_ram_mb = system_info.total_memory() / (1024 * 1024);
    let used_ram_mb = system_info.used_memory() / (1024 * 1024);
    let cpu_usage_percent = system_info.global_cpu_usage();

    let welcome_part = if is_new_user {
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> üëã\n\n\
            –Ø Fulturate ‚Äî –≤–∞—à –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. \
            –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings.\n\n".to_string()
    } else {
        "<b>Fulturate —Ç—É—Ç!</b> ‚öôÔ∏è\n\n".to_string()
    };

    let response_message = format!(
        "{welcome_part}\
        <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n\
        <pre>\
        > –í–µ—Ä—Å–∏—è:      {}\n\
        > –ü–∏–Ω–≥ API:    {} –º—Å\n\
        > –ù–∞–≥—Ä—É–∑–∫–∞ –¶–ü: {:.2}%\n\
        > –û–ó–£:         {}/{} –ú–ë\n\
        </pre>",
        version, api_ping, cpu_usage_percent, used_ram_mb, total_ram_mb
    );

    let news_link_button =
        InlineKeyboardButton::url("–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏", "https://t.me/fulturate".parse().unwrap());
    let terms_of_use_link_button = InlineKeyboardButton::url(
        "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "https://telegra.ph/Terms-Of-Use--Usloviya-ispolzovaniya-09-21"
            .parse()
            .unwrap(),
    );

    bot.send_message(message.chat.id, response_message)
        .reply_parameters(ReplyParameters::new(message.id))
        .parse_mode(ParseMode::Html)
        .reply_markup(InlineKeyboardMarkup::new(vec![vec![
            news_link_button,
            terms_of_use_link_button,
        ]]))
        .await?;

    Ok(())
}