use crate::config::Config;
use crate::util::errors::MyError;
use crate::util::inline::delete_message_button;
use teloxide::prelude::*;
use teloxide::types::{
    InlineKeyboardButton, InlineKeyboardMarkup, Message, ParseMode, ReplyParameters,
};
use translators::{GoogleTranslator, Translator};

pub const SUPPORTED_LANGUAGES: &[(&str, &str)] = &[
    ("uk", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"),
    ("en", "üá¨üáß English"),
    ("us", "üá∫üá∏ English (US)"),
    ("ru", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"),
    ("de", "üá©üá™ Deutsch"),
    ("fr", "üá´üá∑ Fran√ßais"),
    ("es", "üá™üá∏ Espa√±ol"),
    ("it", "üáÆüáπ Italiano"),
    ("zh", "üá®üá≥ ‰∏≠Êñá"),
    ("ja", "üáØüáµ Êó•Êú¨Ë™û"),
    ("ko", "üá∞üá∑ ÌïúÍµ≠Ïñ¥"),
    ("pl", "üáµüá± Polski"),
    ("ar", "üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"),
    ("pt", "üáµüáπ Portugu√™s"),
    ("tr", "üáπüá∑ T√ºrk√ße"),
    ("nl", "üá≥üá± Nederlands"),
    ("sv", "üá∏üá™ Svenska"),
    ("no", "üá≥üá¥ Norsk"),
    ("da", "üá©üá∞ Dansk"),
    ("fi", "üá´üáÆ Suomi"),
    ("el", "üá¨üá∑ ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨"),
    ("he", "üáÆüá± ◊¢◊ë◊®◊ô◊™"),
    ("hi", "üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä"),
    ("id", "üáÆüá© Indonesia"),
    ("vi", "üáªüá≥ Ti·∫øng Vi·ªát"),
    ("th", "üáπüá≠ ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"),
    ("cs", "üá®üáø ƒåe≈°tina"),
    ("hu", "üá≠üá∫ Magyar"),
    ("ro", "üá∑üá¥ Rom√¢nƒÉ"),
    ("bg", "üáßüá¨ –ë—ä–ª–≥–∞—Ä—Å–∫–∏"),
    ("sr", "üá∑üá∏ –°—Ä–ø—Å–∫–∏"),
    ("hr", "üá≠üá∑ Hrvatski"),
    ("sk", "üá∏üá∞ Slovenƒçina"),
    ("sl", "üá∏üáÆ Sloven≈°ƒçina"),
    ("lt", "üá±üáπ Lietuvi≈≥"),
    ("lv", "üá±üáª Latvie≈°u"),
    ("et", "üá™üá™ Eesti"),
];
pub const LANGUAGES_PER_PAGE: usize = 6;

pub async fn translate_handler(
    bot: Bot,
    msg: &Message,
    config: &Config,
    arg: String,
) -> Result<(), MyError> {
    let replied_to_message = match msg.reply_to_message() {
        Some(message) => message,
        None => {
            bot.send_message(
                msg.chat.id,
                "–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
            )
                .reply_parameters(ReplyParameters::new(msg.id))
                .parse_mode(ParseMode::Html)
                .await?;
            return Ok(());
        }
    };

    let text_to_translate = match replied_to_message.text() {
        Some(text) => text,
        None => {
            bot.send_message(msg.chat.id, "–û—Ç–≤–µ—á–∞—Ç—å –Ω—É–∂–Ω–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <b>—Å —Ç–µ–∫—Å—Ç–æ–º</b>.")
                .reply_parameters(ReplyParameters::new(msg.id))
                .parse_mode(ParseMode::Html)
                .await?;
            return Ok(());
        }
    };

    let user = msg.from.clone().unwrap();
    if replied_to_message.clone().from.unwrap().is_bot {
        bot.send_message(msg.chat.id, "–û—Ç–≤–µ—á–∞—Ç—å –Ω—É–∂–Ω–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            .reply_parameters(ReplyParameters::new(msg.id))
            .parse_mode(ParseMode::Html)
            .await?;
        return Ok(());
    }

    let target_lang: String;

    if !arg.trim().is_empty() {
        target_lang = normalize_language_code(&arg.trim());
    } else {
        let redis_key = format!("user_lang:{}", user.id);
        let redis_client = config.get_redis_client();
        let cached_lang: Option<String> = redis_client.get(&redis_key).await?;

        if let Some(lang) = cached_lang {
            target_lang = lang;
        } else {
            let keyboard = create_language_keyboard(0);
            bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
                .reply_markup(keyboard)
                .reply_parameters(ReplyParameters::new(replied_to_message.id))
                .await?;
            return Ok(());
        }
    }

    let google_trans = GoogleTranslator::default();
    let res = google_trans
        .translate_async(text_to_translate, "", &*target_lang)
        .await
        .unwrap();

    let response = format!("<blockquote>{}\n</blockquote>", res,);

    let lang_display_name = SUPPORTED_LANGUAGES
        .iter()
        .find(|(code, _)| *code == target_lang)
        .map(|(_, name)| *name)
        .unwrap_or(&target_lang);

    let switch_lang_button =
        InlineKeyboardButton::callback(lang_display_name.to_string(), "tr_show_langs".to_string());

    let mut keyboard = delete_message_button(user.id.0);
    if let Some(first_row) = keyboard.inline_keyboard.get_mut(0) {
        first_row.insert(0, switch_lang_button);
    } else {
        keyboard.inline_keyboard.push(vec![switch_lang_button]);
    }

    bot.send_message(msg.chat.id, response)
        .reply_parameters(ReplyParameters::new(replied_to_message.id))
        .parse_mode(ParseMode::Html)
        .reply_markup(keyboard)
        .await?;

    Ok(())
}

pub fn create_language_keyboard(page: usize) -> InlineKeyboardMarkup {
    let mut keyboard: Vec<Vec<InlineKeyboardButton>> = Vec::new();
    let start = page * LANGUAGES_PER_PAGE;
    let end = std::cmp::min(start + LANGUAGES_PER_PAGE, SUPPORTED_LANGUAGES.len());

    if start >= end {
        return InlineKeyboardMarkup::new(keyboard);
    }

    let page_languages = &SUPPORTED_LANGUAGES[start..end];

    for chunk in page_languages.chunks(2) {
        let row = chunk
            .iter()
            .map(|(code, name)| {
                InlineKeyboardButton::callback(name.to_string(), format!("tr_lang:{}", code))
            })
            .collect();
        keyboard.push(row);
    }

    let mut nav_row: Vec<InlineKeyboardButton> = Vec::new();
    if page > 0 {
        nav_row.push(InlineKeyboardButton::callback(
            "‚¨ÖÔ∏è".to_string(),
            format!("tr_page:{}", page - 1),
        ));
    }
    if end < SUPPORTED_LANGUAGES.len() {
        nav_row.push(InlineKeyboardButton::callback(
            "‚û°Ô∏è".to_string(),
            format!("tr_page:{}", page + 1),
        ));
    }

    if !nav_row.is_empty() {
        keyboard.push(nav_row);
    }

    InlineKeyboardMarkup::new(keyboard)
}

pub fn normalize_language_code(lang: &str) -> String {
    match lang.to_lowercase().as_str() {
        "ua" | "ukrainian" | "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π" | "uk" => "uk".to_string(),
        "ru" | "russian" | "—Ä—É—Å—Å–∫–∏–π" => "ru".to_string(),
        "en" | "english" | "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π" => "en".to_string(),
        "de" | "german" | "–Ω–µ–º–µ—Ü–∫–∏–π" => "de".to_string(),
        "fr" | "french" | "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" => "fr".to_string(),
        "es" | "spanish" | "–∏—Å–ø–∞–Ω—Å–∫–∏–π" => "es".to_string(),
        "it" | "italian" | "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π" => "it".to_string(),
        "zh" | "chinese" | "–∫–∏—Ç–∞–π—Å–∫–∏–π" => "zh".to_string(),
        "ja" | "japanese" | "—è–ø–æ–Ω—Å–∫–∏–π" => "ja".to_string(),
        _ => lang.to_lowercase(),
    }
}
